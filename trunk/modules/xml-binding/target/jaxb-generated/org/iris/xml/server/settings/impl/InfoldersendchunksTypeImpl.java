//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.06.27 at 10:52:14 CEST 
//


package org.iris.xml.server.settings.impl;

public class InfoldersendchunksTypeImpl implements org.iris.xml.server.settings.InfoldersendchunksType, com.sun.xml.bind.JAXBObject, org.iris.xml.server.settings.impl.runtime.UnmarshallableObject, org.iris.xml.server.settings.impl.runtime.XMLSerializable, org.iris.xml.server.settings.impl.runtime.ValidatableObject
{

    protected boolean has_Infolderchunkthreshold;
    protected short _Infolderchunkthreshold;
    protected boolean has_Infolderchunksize;
    protected short _Infolderchunksize;
    protected boolean has_Sendinfolderchunkson;
    protected boolean _Sendinfolderchunkson;
    public final static java.lang.Class version = (org.iris.xml.server.settings.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (org.iris.xml.server.settings.InfoldersendchunksType.class);
    }

    public short getInfolderchunkthreshold() {
        return _Infolderchunkthreshold;
    }

    public void setInfolderchunkthreshold(short value) {
        _Infolderchunkthreshold = value;
        has_Infolderchunkthreshold = true;
    }

    public short getInfolderchunksize() {
        return _Infolderchunksize;
    }

    public void setInfolderchunksize(short value) {
        _Infolderchunksize = value;
        has_Infolderchunksize = true;
    }

    public boolean isSendinfolderchunkson() {
        return _Sendinfolderchunkson;
    }

    public void setSendinfolderchunkson(boolean value) {
        _Sendinfolderchunkson = value;
        has_Sendinfolderchunkson = true;
    }

    public org.iris.xml.server.settings.impl.runtime.UnmarshallingEventHandler createUnmarshaller(org.iris.xml.server.settings.impl.runtime.UnmarshallingContext context) {
        return new org.iris.xml.server.settings.impl.InfoldersendchunksTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(org.iris.xml.server.settings.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (!has_Infolderchunkthreshold) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Infolderchunkthreshold"));
        }
        if (!has_Infolderchunksize) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Infolderchunksize"));
        }
        if (!has_Sendinfolderchunkson) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Sendinfolderchunkson"));
        }
        context.startElement("", "infolderchunksize");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(javax.xml.bind.DatatypeConverter.printShort(((short) _Infolderchunksize)), "Infolderchunksize");
        } catch (java.lang.Exception e) {
            org.iris.xml.server.settings.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        context.startElement("", "infolderchunkthreshold");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(javax.xml.bind.DatatypeConverter.printShort(((short) _Infolderchunkthreshold)), "Infolderchunkthreshold");
        } catch (java.lang.Exception e) {
            org.iris.xml.server.settings.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
    }

    public void serializeAttributes(org.iris.xml.server.settings.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (!has_Infolderchunkthreshold) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Infolderchunkthreshold"));
        }
        if (!has_Infolderchunksize) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Infolderchunksize"));
        }
        if (!has_Sendinfolderchunkson) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Sendinfolderchunkson"));
        }
        context.startAttribute("", "sendinfolderchunkson");
        try {
            context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Sendinfolderchunkson)), "Sendinfolderchunkson");
        } catch (java.lang.Exception e) {
            org.iris.xml.server.settings.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
    }

    public void serializeURIs(org.iris.xml.server.settings.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (!has_Infolderchunkthreshold) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Infolderchunkthreshold"));
        }
        if (!has_Infolderchunksize) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Infolderchunksize"));
        }
        if (!has_Sendinfolderchunkson) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Sendinfolderchunkson"));
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (org.iris.xml.server.settings.InfoldersendchunksType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsr\u0000\'com.sun.msv.grammar.trex.Ele"
+"mentPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/Na"
+"meClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aigno"
+"reUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003pp\u0000sq\u0000~\u0000\u0000pps"
+"r\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxn"
+"g/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/uti"
+"l/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd.ShortType\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com.sun.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]"
+"\u0090&6k\u00be\u0002\u0000\u0001L\u0000\nbaseFacetst\u0000)Lcom/sun/msv/datatype/xsd/XSDatatype"
+"Impl;xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'co"
+"m.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespace"
+"Urit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0016L\u0000\nwhiteSpacet\u0000.Lcom"
+"/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3"
+".org/2001/XMLSchemat\u0000\u0005shortsr\u00005com.sun.msv.datatype.xsd.Whit"
+"eSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype."
+"xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u0000*com.sun.msv.datatype"
+".xsd.MaxInclusiveFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xs"
+"d.RangeFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\nlimitValuet\u0000\u0012Ljava/lang/Object;xr\u0000"
+"9com.sun.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7"
+"Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypeq\u0000~\u0000\u0012L\u0000"
+"\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfa"
+"cetNameq\u0000~\u0000\u0016xq\u0000~\u0000\u0015ppq\u0000~\u0000\u001d\u0000\u0001sr\u0000*com.sun.msv.datatype.xsd.MinI"
+"nclusiveFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001fppq\u0000~\u0000\u001d\u0000\u0000sr\u0000 com.sun.msv.datat"
+"ype.xsd.IntType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0011q\u0000~\u0000\u0019t\u0000\u0003intq\u0000~\u0000\u001dsq\u0000~\u0000\u001eppq\u0000~\u0000"
+"\u001d\u0000\u0001sq\u0000~\u0000%ppq\u0000~\u0000\u001d\u0000\u0000sr\u0000!com.sun.msv.datatype.xsd.LongType\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0011q\u0000~\u0000\u0019t\u0000\u0004longq\u0000~\u0000\u001dsq\u0000~\u0000\u001eppq\u0000~\u0000\u001d\u0000\u0001sq\u0000~\u0000%ppq\u0000~\u0000\u001d\u0000\u0000s"
+"r\u0000$com.sun.msv.datatype.xsd.IntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0011q\u0000~\u0000"
+"\u0019t\u0000\u0007integerq\u0000~\u0000\u001dsr\u0000,com.sun.msv.datatype.xsd.FractionDigitsF"
+"acet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\u0005scalexr\u0000;com.sun.msv.datatype.xsd.DataType"
+"WithLexicalConstraintFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xq\u0000~\u0000\"ppq\u0000~\u0000\u001d\u0001\u0000sr\u0000#com."
+"sun.msv.datatype.xsd.NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0013q\u0000~\u0000\u0019t\u0000\u0007deci"
+"malq\u0000~\u0000\u001dq\u0000~\u00008t\u0000\u000efractionDigits\u0000\u0000\u0000\u0000q\u0000~\u00002t\u0000\fminInclusivesr\u0000\u000eja"
+"va.lang.Long;\u008b\u00e4\u0090\u00cc\u008f#\u00df\u0002\u0000\u0001J\u0000\u0005valuexr\u0000\u0010java.lang.Number\u0086\u00ac\u0095\u001d\u000b\u0094\u00e0\u008b\u0002"
+"\u0000\u0000xp\u0080\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000~\u00002t\u0000\fmaxInclusivesq\u0000~\u0000<\u007f\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ffq\u0000~\u0000-q\u0000~\u0000;sr\u0000\u0011"
+"java.lang.Integer\u0012\u00e2\u00a0\u00a4\u00f7\u0081\u00878\u0002\u0000\u0001I\u0000\u0005valuexq\u0000~\u0000=\u0080\u0000\u0000\u0000q\u0000~\u0000-q\u0000~\u0000?sq\u0000~"
+"\u0000A\u007f\u00ff\u00ff\u00ffq\u0000~\u0000(q\u0000~\u0000;sr\u0000\u000fjava.lang.ShorthM7\u00134`\u00daR\u0002\u0000\u0001S\u0000\u0005valuexq\u0000~\u0000="
+"\u0080\u0000q\u0000~\u0000(q\u0000~\u0000?sq\u0000~\u0000D\u007f\u00ffsr\u00000com.sun.msv.grammar.Expression$NullS"
+"etExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPa"
+"ir\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0016L\u0000\fnamespaceURIq\u0000~\u0000\u0016xpq\u0000~\u0000\u001aq\u0000~"
+"\u0000\u0019sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 co"
+"m.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameC"
+"lassq\u0000~\u0000\bxq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000ps"
+"q\u0000~\u0000\fppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~"
+"\u0000\u0013q\u0000~\u0000\u0019t\u0000\u0005QNameq\u0000~\u0000\u001dq\u0000~\u0000Hsq\u0000~\u0000Iq\u0000~\u0000Tq\u0000~\u0000\u0019sr\u0000#com.sun.msv.gra"
+"mmar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0016L\u0000\fnamespace"
+"URIq\u0000~\u0000\u0016xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0004typ"
+"et\u0000)http://www.w3.org/2001/XMLSchema-instancesr\u00000com.sun.msv"
+".grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000O"
+"\u0001psq\u0000~\u0000Vt\u0000\u0011infolderchunksizet\u0000\u0000sq\u0000~\u0000\u0007pp\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u000fsq\u0000~\u0000Kp"
+"psq\u0000~\u0000Mq\u0000~\u0000Ppq\u0000~\u0000Qq\u0000~\u0000Xq\u0000~\u0000\\sq\u0000~\u0000Vt\u0000\u0016infolderchunkthresholdq"
+"\u0000~\u0000`sq\u0000~\u0000Mppsq\u0000~\u0000\fppsr\u0000$com.sun.msv.datatype.xsd.BooleanType"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0013q\u0000~\u0000\u0019t\u0000\u0007booleanq\u0000~\u0000\u001dq\u0000~\u0000Hsq\u0000~\u0000Iq\u0000~\u0000kq\u0000~\u0000\u0019sq"
+"\u0000~\u0000Vt\u0000\u0014sendinfolderchunksonq\u0000~\u0000`sr\u0000\"com.sun.msv.grammar.Expr"
+"essionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/Expr"
+"essionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPo"
+"ol$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$"
+"Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0006\u0001pq\u0000~\u0000\u0005q\u0000~\u0000\u0006q\u0000~\u0000Lq"
+"\u0000~\u0000\u000bq\u0000~\u0000cq\u0000~\u0000bx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends org.iris.xml.server.settings.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(org.iris.xml.server.settings.impl.runtime.UnmarshallingContext context) {
            super(context, "----------");
        }

        protected Unmarshaller(org.iris.xml.server.settings.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return org.iris.xml.server.settings.impl.InfoldersendchunksTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "sendinfolderchunkson");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        break;
                    case  6 :
                        if (("infolderchunkthreshold" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 7;
                            return ;
                        }
                        break;
                    case  3 :
                        if (("infolderchunksize" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 4;
                            return ;
                        }
                        break;
                    case  9 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Sendinfolderchunkson = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Sendinfolderchunkson = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "sendinfolderchunkson");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        break;
                    case  8 :
                        if (("infolderchunkthreshold" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 9;
                            return ;
                        }
                        break;
                    case  9 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  5 :
                        if (("infolderchunksize" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("sendinfolderchunkson" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        break;
                    case  9 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "sendinfolderchunkson");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        break;
                    case  2 :
                        if (("sendinfolderchunkson" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  9 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  0 :
                            attIdx = context.getAttribute("", "sendinfolderchunkson");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 3;
                                continue outer;
                            }
                            break;
                        case  1 :
                            eatText1(value);
                            state = 2;
                            return ;
                        case  9 :
                            revertToParentFromText(value);
                            return ;
                        case  4 :
                            eatText2(value);
                            state = 5;
                            return ;
                        case  7 :
                            eatText3(value);
                            state = 8;
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Infolderchunksize = javax.xml.bind.DatatypeConverter.parseShort(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Infolderchunksize = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Infolderchunkthreshold = javax.xml.bind.DatatypeConverter.parseShort(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Infolderchunkthreshold = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
