//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.10.03 at 10:59:53 CEST 
//


package org.siri.feederconfig.xmlbinding.impl;

public class InfolderTypeImpl implements org.siri.feederconfig.xmlbinding.InfolderType, com.sun.xml.bind.JAXBObject, org.siri.feederconfig.xmlbinding.impl.runtime.UnmarshallableObject, org.siri.feederconfig.xmlbinding.impl.runtime.XMLSerializable, org.siri.feederconfig.xmlbinding.impl.runtime.ValidatableObject
{

    protected boolean has_Skipfirstblankline;
    protected boolean _Skipfirstblankline;
    protected org.siri.feederconfig.xmlbinding.InfoldersendchunksType _Infoldersendchunks;
    protected java.lang.String _Infolderpath;
    protected boolean has_IntervallInMilliSeconds;
    protected long _IntervallInMilliSeconds;
    protected boolean has_Sortalpha;
    protected boolean _Sortalpha;
    public final static java.lang.Class version = (org.siri.feederconfig.xmlbinding.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (org.siri.feederconfig.xmlbinding.InfolderType.class);
    }

    public boolean isSkipfirstblankline() {
        return _Skipfirstblankline;
    }

    public void setSkipfirstblankline(boolean value) {
        _Skipfirstblankline = value;
        has_Skipfirstblankline = true;
    }

    public org.siri.feederconfig.xmlbinding.InfoldersendchunksType getInfoldersendchunks() {
        return _Infoldersendchunks;
    }

    public void setInfoldersendchunks(org.siri.feederconfig.xmlbinding.InfoldersendchunksType value) {
        _Infoldersendchunks = value;
    }

    public java.lang.String getInfolderpath() {
        return _Infolderpath;
    }

    public void setInfolderpath(java.lang.String value) {
        _Infolderpath = value;
    }

    public long getIntervallInMilliSeconds() {
        return _IntervallInMilliSeconds;
    }

    public void setIntervallInMilliSeconds(long value) {
        _IntervallInMilliSeconds = value;
        has_IntervallInMilliSeconds = true;
    }

    public boolean isSortalpha() {
        return _Sortalpha;
    }

    public void setSortalpha(boolean value) {
        _Sortalpha = value;
        has_Sortalpha = true;
    }

    public org.siri.feederconfig.xmlbinding.impl.runtime.UnmarshallingEventHandler createUnmarshaller(org.siri.feederconfig.xmlbinding.impl.runtime.UnmarshallingContext context) {
        return new org.siri.feederconfig.xmlbinding.impl.InfolderTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(org.siri.feederconfig.xmlbinding.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (!has_Skipfirstblankline) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Skipfirstblankline"));
        }
        if (!has_IntervallInMilliSeconds) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "IntervallInMilliSeconds"));
        }
        context.startElement("", "infolderpath");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(((java.lang.String) _Infolderpath), "Infolderpath");
        } catch (java.lang.Exception e) {
            org.siri.feederconfig.xmlbinding.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        context.startElement("", "intervallInMilliSeconds");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(javax.xml.bind.DatatypeConverter.printLong(((long) _IntervallInMilliSeconds)), "IntervallInMilliSeconds");
        } catch (java.lang.Exception e) {
            org.siri.feederconfig.xmlbinding.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        context.startElement("", "skipfirstblankline");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Skipfirstblankline)), "Skipfirstblankline");
        } catch (java.lang.Exception e) {
            org.siri.feederconfig.xmlbinding.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        if (has_Sortalpha) {
            context.startElement("", "sortalpha");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Sortalpha)), "Sortalpha");
            } catch (java.lang.Exception e) {
                org.siri.feederconfig.xmlbinding.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        context.startElement("", "infoldersendchunks");
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Infoldersendchunks), "Infoldersendchunks");
        context.endNamespaceDecls();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Infoldersendchunks), "Infoldersendchunks");
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _Infoldersendchunks), "Infoldersendchunks");
        context.endElement();
    }

    public void serializeAttributes(org.siri.feederconfig.xmlbinding.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (!has_Skipfirstblankline) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Skipfirstblankline"));
        }
        if (!has_IntervallInMilliSeconds) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "IntervallInMilliSeconds"));
        }
    }

    public void serializeURIs(org.siri.feederconfig.xmlbinding.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (!has_Skipfirstblankline) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Skipfirstblankline"));
        }
        if (!has_IntervallInMilliSeconds) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "IntervallInMilliSeconds"));
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (org.siri.feederconfig.xmlbinding.InfolderType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\'com.sun.msv."
+"grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/su"
+"n/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq"
+"\u0000~\u0000\u0003pp\u0000sq\u0000~\u0000\u0000ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002"
+"dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001d"
+"Lcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000#com.sun.msv.datatyp"
+"e.xsd.AnyURIType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.Buil"
+"tinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Concret"
+"eType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~"
+"\u0000\u0016L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProces"
+"sor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0006anyURIsr\u00005com.su"
+"n.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr"
+"\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xps"
+"r\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocal"
+"Nameq\u0000~\u0000\u0016L\u0000\fnamespaceURIq\u0000~\u0000\u0016xpq\u0000~\u0000\u001aq\u0000~\u0000\u0019sr\u0000\u001dcom.sun.msv.gra"
+"mmar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.Att"
+"ributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\nxq\u0000~\u0000\u0003sr\u0000\u0011ja"
+"va.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u000eppsr\u0000\"com.sun.ms"
+"v.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0013q\u0000~\u0000\u0019t\u0000\u0005QNameq\u0000~\u0000\u001dq"
+"\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u0000+q\u0000~\u0000\u0019sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0016L\u0000\fnamespaceURIq\u0000~\u0000\u0016xr\u0000\u001dcom.sun.m"
+"sv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0004typet\u0000)http://www.w3.org"
+"/2001/XMLSchema-instancesr\u00000com.sun.msv.grammar.Expression$E"
+"psilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000&\u0001psq\u0000~\u0000-t\u0000\finfolderpa"
+"tht\u0000\u0000sq\u0000~\u0000\tpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000eppsr\u0000*com.sun.msv.datatype.xsd.M"
+"inInclusiveFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.Rang"
+"eFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\nlimitValuet\u0000\u0012Ljava/lang/Object;xr\u00009com.s"
+"un.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT"
+"\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005"
+"Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypet\u0000)Lcom/sun/m"
+"sv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTypet\u0000\'Lcom/sun/ms"
+"v/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u0016xq\u0000~\u0000\u0015q\u0000~\u00007pq\u0000~"
+"\u0000\u001d\u0000\u0000sr\u0000!com.sun.msv.datatype.xsd.LongType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+com."
+"sun.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be\u0002\u0000\u0001L\u0000\nbaseFac"
+"etsq\u0000~\u0000@xq\u0000~\u0000\u0013q\u0000~\u0000\u0019t\u0000\u0004longq\u0000~\u0000\u001dsr\u0000*com.sun.msv.datatype.xsd."
+"MaxInclusiveFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000<ppq\u0000~\u0000\u001d\u0000\u0001sq\u0000~\u0000;ppq\u0000~\u0000\u001d\u0000\u0000sr"
+"\u0000$com.sun.msv.datatype.xsd.IntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Dq\u0000~\u0000\u0019"
+"t\u0000\u0007integerq\u0000~\u0000\u001dsr\u0000,com.sun.msv.datatype.xsd.FractionDigitsFa"
+"cet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\u0005scalexr\u0000;com.sun.msv.datatype.xsd.DataTypeW"
+"ithLexicalConstraintFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xq\u0000~\u0000?ppq\u0000~\u0000\u001d\u0001\u0000sr\u0000#com.s"
+"un.msv.datatype.xsd.NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0013q\u0000~\u0000\u0019t\u0000\u0007decim"
+"alq\u0000~\u0000\u001dq\u0000~\u0000Qt\u0000\u000efractionDigits\u0000\u0000\u0000\u0000q\u0000~\u0000Kt\u0000\fminInclusivesr\u0000\u000ejav"
+"a.lang.Long;\u008b\u00e4\u0090\u00cc\u008f#\u00df\u0002\u0000\u0001J\u0000\u0005valuexr\u0000\u0010java.lang.Number\u0086\u00ac\u0095\u001d\u000b\u0094\u00e0\u008b\u0002\u0000"
+"\u0000xp\u0080\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000~\u0000Kt\u0000\fmaxInclusivesq\u0000~\u0000U\u007f\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ffq\u0000~\u0000Eq\u0000~\u0000Tsq\u0000~\u0000"
+"U\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u00d0q\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\flong-derivedq\u0000~\u00007sq\u0000~\u0000\"ppsq\u0000~\u0000$q\u0000~\u0000\'p"
+"q\u0000~\u0000(q\u0000~\u0000/q\u0000~\u00003sq\u0000~\u0000-t\u0000\u0017intervallInMilliSecondsq\u0000~\u00007sq\u0000~\u0000\tpp"
+"\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000eppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0013q\u0000~\u0000\u0019t\u0000\u0007booleanq\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u0000fq\u0000~\u0000\u0019sq\u0000~\u0000"
+"\"ppsq\u0000~\u0000$q\u0000~\u0000\'pq\u0000~\u0000(q\u0000~\u0000/q\u0000~\u00003sq\u0000~\u0000-t\u0000\u0012skipfirstblanklineq\u0000~"
+"\u00007sq\u0000~\u0000\"ppsq\u0000~\u0000\tq\u0000~\u0000\'p\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000csq\u0000~\u0000\"ppsq\u0000~\u0000$q\u0000~\u0000\'pq\u0000~\u0000"
+"(q\u0000~\u0000/q\u0000~\u00003sq\u0000~\u0000-t\u0000\tsortalphaq\u0000~\u00007q\u0000~\u00003sq\u0000~\u0000\tpp\u0000sq\u0000~\u0000\u0000ppsq\u0000~"
+"\u0000\tpp\u0000sq\u0000~\u0000\"ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000"
+"xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003"
+"q\u0000~\u0000\'psq\u0000~\u0000$q\u0000~\u0000\'psr\u00002com.sun.msv.grammar.Expression$AnyStri"
+"ngExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u00004psr\u0000 com.sun.msv.grammar.A"
+"nyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000.q\u0000~\u00003sq\u0000~\u0000-t\u00007org.siri.feedercon"
+"fig.xmlbinding.InfoldersendchunksTypet\u0000+http://java.sun.com/"
+"jaxb/xjc/dummy-elementssq\u0000~\u0000\"ppsq\u0000~\u0000$q\u0000~\u0000\'pq\u0000~\u0000(q\u0000~\u0000/q\u0000~\u00003sq"
+"\u0000~\u0000-t\u0000\u0012infoldersendchunksq\u0000~\u00007sr\u0000\"com.sun.msv.grammar.Expres"
+"sionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/Expres"
+"sionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool"
+"$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lc"
+"om/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0011\u0001pq\u0000~\u0000\bq\u0000~\u0000\u0006q\u0000~\u0000\u0005q\u0000~"
+"\u00009q\u0000~\u0000tq\u0000~\u0000bq\u0000~\u0000nq\u0000~\u0000vq\u0000~\u0000yq\u0000~\u0000\rq\u0000~\u0000#q\u0000~\u0000]q\u0000~\u0000hq\u0000~\u0000oq\u0000~\u0000\u0082q\u0000~"
+"\u0000lq\u0000~\u0000\u0007x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends org.siri.feederconfig.xmlbinding.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(org.siri.feederconfig.xmlbinding.impl.runtime.UnmarshallingContext context) {
            super(context, "----------------");
        }

        protected Unmarshaller(org.siri.feederconfig.xmlbinding.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return org.siri.feederconfig.xmlbinding.impl.InfolderTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  13 :
                        attIdx = context.getAttribute("", "sendinfolderchunkson");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  6 :
                        if (("skipfirstblankline" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 7;
                            return ;
                        }
                        break;
                    case  12 :
                        if (("infoldersendchunks" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 13;
                            return ;
                        }
                        break;
                    case  3 :
                        if (("intervallInMilliSeconds" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 4;
                            return ;
                        }
                        break;
                    case  0 :
                        if (("infolderpath" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 1;
                            return ;
                        }
                        break;
                    case  9 :
                        if (("sortalpha" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  11 :
                        if (("sortalpha" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 12;
                            return ;
                        }
                        break;
                    case  13 :
                        attIdx = context.getAttribute("", "sendinfolderchunkson");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  14 :
                        if (("infoldersendchunks" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 15;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("skipfirstblankline" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 9;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("infolderpath" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("intervallInMilliSeconds" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  9 :
                        state = 12;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  13 :
                        if (("sendinfolderchunkson" == ___local)&&("" == ___uri)) {
                            _Infoldersendchunks = ((org.siri.feederconfig.xmlbinding.impl.InfoldersendchunksTypeImpl) spawnChildFromEnterAttribute((org.siri.feederconfig.xmlbinding.impl.InfoldersendchunksTypeImpl.class), 14, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  9 :
                        state = 12;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  13 :
                        attIdx = context.getAttribute("", "sendinfolderchunkson");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  9 :
                        state = 12;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  15 :
                            revertToParentFromText(value);
                            return ;
                        case  13 :
                            attIdx = context.getAttribute("", "sendinfolderchunkson");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  7 :
                            eatText1(value);
                            state = 8;
                            return ;
                        case  1 :
                            eatText2(value);
                            state = 2;
                            return ;
                        case  10 :
                            eatText3(value);
                            state = 11;
                            return ;
                        case  4 :
                            eatText4(value);
                            state = 5;
                            return ;
                        case  9 :
                            state = 12;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Skipfirstblankline = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Skipfirstblankline = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Infolderpath = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Sortalpha = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Sortalpha = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _IntervallInMilliSeconds = javax.xml.bind.DatatypeConverter.parseLong(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_IntervallInMilliSeconds = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
