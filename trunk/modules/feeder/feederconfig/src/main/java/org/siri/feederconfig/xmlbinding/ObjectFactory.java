//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.10.03 at 10:59:53 CEST 
//


package org.siri.feederconfig.xmlbinding;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the org.siri.feederconfig.xmlbinding package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends org.siri.feederconfig.xmlbinding.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(88, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static org.siri.feederconfig.xmlbinding.impl.runtime.GrammarInfo grammarInfo = new org.siri.feederconfig.xmlbinding.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (org.siri.feederconfig.xmlbinding.ObjectFactory.class));
    public final static java.lang.Class version = (org.siri.feederconfig.xmlbinding.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.ReconnectToObjectPolicy.class), "org.siri.feederconfig.xmlbinding.impl.ReconnectToObjectPolicyImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Iorpath.class), "org.siri.feederconfig.xmlbinding.impl.IorpathImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Maxbackupindex.class), "org.siri.feederconfig.xmlbinding.impl.MaxbackupindexImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.GlobalSettingsType.class), "org.siri.feederconfig.xmlbinding.impl.GlobalSettingsTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.InfoldersendchunksType.class), "org.siri.feederconfig.xmlbinding.impl.InfoldersendchunksTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.PopType.class), "org.siri.feederconfig.xmlbinding.impl.PopTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Loglevel.class), "org.siri.feederconfig.xmlbinding.impl.LoglevelImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.EmailsendintervallInMilliSeconds.class), "org.siri.feederconfig.xmlbinding.impl.EmailsendintervallInMilliSecondsImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.OutfolderType.class), "org.siri.feederconfig.xmlbinding.impl.OutfolderTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.TransformType.class), "org.siri.feederconfig.xmlbinding.impl.TransformTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Smsservice.class), "org.siri.feederconfig.xmlbinding.impl.SmsserviceImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.EmailserversettingsType.class), "org.siri.feederconfig.xmlbinding.impl.EmailserversettingsTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Servicerootpath.class), "org.siri.feederconfig.xmlbinding.impl.ServicerootpathImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.EmailnotificationType.class), "org.siri.feederconfig.xmlbinding.impl.EmailnotificationTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Sortonresend.class), "org.siri.feederconfig.xmlbinding.impl.SortonresendImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Smsonfailure.class), "org.siri.feederconfig.xmlbinding.impl.SmsonfailureImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.SmsType.class), "org.siri.feederconfig.xmlbinding.impl.SmsTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.IntervallInMilliSeconds.class), "org.siri.feederconfig.xmlbinding.impl.IntervallInMilliSecondsImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Objectmethod.class), "org.siri.feederconfig.xmlbinding.impl.ObjectmethodImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Emailonfailure.class), "org.siri.feederconfig.xmlbinding.impl.EmailonfailureImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Maxfilesize.class), "org.siri.feederconfig.xmlbinding.impl.MaxfilesizeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.NameserviceType.class), "org.siri.feederconfig.xmlbinding.impl.NameserviceTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.ImapType.class), "org.siri.feederconfig.xmlbinding.impl.ImapTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Archivefolderpath.class), "org.siri.feederconfig.xmlbinding.impl.ArchivefolderpathImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Outfolderpath.class), "org.siri.feederconfig.xmlbinding.impl.OutfolderpathImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.SmtpType.class), "org.siri.feederconfig.xmlbinding.impl.SmtpTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Logfolderpath.class), "org.siri.feederconfig.xmlbinding.impl.LogfolderpathImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.SystemConfig.class), "org.siri.feederconfig.xmlbinding.impl.SystemConfigImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Infolderchunkthreshold.class), "org.siri.feederconfig.xmlbinding.impl.InfolderchunkthresholdImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.SystemConfigType.class), "org.siri.feederconfig.xmlbinding.impl.SystemConfigTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.ImapserverType.class), "org.siri.feederconfig.xmlbinding.impl.ImapserverTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Message.class), "org.siri.feederconfig.xmlbinding.impl.MessageImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.ServiceType.class), "org.siri.feederconfig.xmlbinding.impl.ServiceTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Objectname.class), "org.siri.feederconfig.xmlbinding.impl.ObjectnameImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.ArchivehandlerType.class), "org.siri.feederconfig.xmlbinding.impl.ArchivehandlerTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.ReconnectToObjectInMilliSeconds.class), "org.siri.feederconfig.xmlbinding.impl.ReconnectToObjectInMilliSecondsImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.ErrorType.class), "org.siri.feederconfig.xmlbinding.impl.ErrorTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.EmailsettingsType.class), "org.siri.feederconfig.xmlbinding.impl.EmailsettingsTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.InfolderType.class), "org.siri.feederconfig.xmlbinding.impl.InfolderTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Errorinfofolderpath.class), "org.siri.feederconfig.xmlbinding.impl.ErrorinfofolderpathImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Backupfolderpath.class), "org.siri.feederconfig.xmlbinding.impl.BackupfolderpathImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Infolderpath.class), "org.siri.feederconfig.xmlbinding.impl.InfolderpathImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.PopserverType.class), "org.siri.feederconfig.xmlbinding.impl.PopserverTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.MaxInactivityPeriodInMilliSeconds.class), "org.siri.feederconfig.xmlbinding.impl.MaxInactivityPeriodInMilliSecondsImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Skipfirstblankline.class), "org.siri.feederconfig.xmlbinding.impl.SkipfirstblanklineImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Errorfolderpath.class), "org.siri.feederconfig.xmlbinding.impl.ErrorfolderpathImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Sortalpha.class), "org.siri.feederconfig.xmlbinding.impl.SortalphaImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.NotifyeveryintervallInMilliSeconds.class), "org.siri.feederconfig.xmlbinding.impl.NotifyeveryintervallInMilliSecondsImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.LoggingType.class), "org.siri.feederconfig.xmlbinding.impl.LoggingTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.InactivityType.class), "org.siri.feederconfig.xmlbinding.impl.InactivityTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.AppenderType.class), "org.siri.feederconfig.xmlbinding.impl.AppenderTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Rollingschedule.class), "org.siri.feederconfig.xmlbinding.impl.RollingscheduleImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Infolderchunksize.class), "org.siri.feederconfig.xmlbinding.impl.InfolderchunksizeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.ErrornotificationType.class), "org.siri.feederconfig.xmlbinding.impl.ErrornotificationTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.SmtpserverType.class), "org.siri.feederconfig.xmlbinding.impl.SmtpserverTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.BackupType.class), "org.siri.feederconfig.xmlbinding.impl.BackupTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.TransformfileType.class), "org.siri.feederconfig.xmlbinding.impl.TransformfileTypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Paramtype.class), "org.siri.feederconfig.xmlbinding.impl.ParamtypeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Logpattern.class), "org.siri.feederconfig.xmlbinding.impl.LogpatternImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Emailservice.class), "org.siri.feederconfig.xmlbinding.impl.EmailserviceImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Emailbatchsize.class), "org.siri.feederconfig.xmlbinding.impl.EmailbatchsizeImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.Numberoferrors.class), "org.siri.feederconfig.xmlbinding.impl.NumberoferrorsImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.CronJob.class), "org.siri.feederconfig.xmlbinding.impl.CronJobImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.EmailOnInactivity.class), "org.siri.feederconfig.xmlbinding.impl.EmailOnInactivityImpl");
        defaultImplementations.put((org.siri.feederconfig.xmlbinding.PollType.class), "org.siri.feederconfig.xmlbinding.impl.PollTypeImpl");
        rootTagMap.put(new javax.xml.namespace.QName("", "reconnectToObjectInMilliSeconds"), (org.siri.feederconfig.xmlbinding.ReconnectToObjectInMilliSeconds.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "loglevel"), (org.siri.feederconfig.xmlbinding.Loglevel.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "backupfolderpath"), (org.siri.feederconfig.xmlbinding.Backupfolderpath.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "objectmethod"), (org.siri.feederconfig.xmlbinding.Objectmethod.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "errorinfofolderpath"), (org.siri.feederconfig.xmlbinding.Errorinfofolderpath.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "message"), (org.siri.feederconfig.xmlbinding.Message.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "emailOnInactivity"), (org.siri.feederconfig.xmlbinding.EmailOnInactivity.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "smsservice"), (org.siri.feederconfig.xmlbinding.Smsservice.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "logpattern"), (org.siri.feederconfig.xmlbinding.Logpattern.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "intervallInMilliSeconds"), (org.siri.feederconfig.xmlbinding.IntervallInMilliSeconds.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "logfolderpath"), (org.siri.feederconfig.xmlbinding.Logfolderpath.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "maxbackupindex"), (org.siri.feederconfig.xmlbinding.Maxbackupindex.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "emailsendintervallInMilliSeconds"), (org.siri.feederconfig.xmlbinding.EmailsendintervallInMilliSeconds.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "outfolderpath"), (org.siri.feederconfig.xmlbinding.Outfolderpath.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "servicerootpath"), (org.siri.feederconfig.xmlbinding.Servicerootpath.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "SystemConfig"), (org.siri.feederconfig.xmlbinding.SystemConfig.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "numberoferrors"), (org.siri.feederconfig.xmlbinding.Numberoferrors.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "infolderchunkthreshold"), (org.siri.feederconfig.xmlbinding.Infolderchunkthreshold.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "emailservice"), (org.siri.feederconfig.xmlbinding.Emailservice.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "emailonfailure"), (org.siri.feederconfig.xmlbinding.Emailonfailure.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "CronJob"), (org.siri.feederconfig.xmlbinding.CronJob.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "skipfirstblankline"), (org.siri.feederconfig.xmlbinding.Skipfirstblankline.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "infolderpath"), (org.siri.feederconfig.xmlbinding.Infolderpath.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "errorfolderpath"), (org.siri.feederconfig.xmlbinding.Errorfolderpath.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "smsonfailure"), (org.siri.feederconfig.xmlbinding.Smsonfailure.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "sortonresend"), (org.siri.feederconfig.xmlbinding.Sortonresend.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "sortalpha"), (org.siri.feederconfig.xmlbinding.Sortalpha.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "maxfilesize"), (org.siri.feederconfig.xmlbinding.Maxfilesize.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "notifyeveryintervallInMilliSeconds"), (org.siri.feederconfig.xmlbinding.NotifyeveryintervallInMilliSeconds.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "reconnectToObjectPolicy"), (org.siri.feederconfig.xmlbinding.ReconnectToObjectPolicy.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "objectname"), (org.siri.feederconfig.xmlbinding.Objectname.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "maxInactivityPeriodInMilliSeconds"), (org.siri.feederconfig.xmlbinding.MaxInactivityPeriodInMilliSeconds.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "paramtype"), (org.siri.feederconfig.xmlbinding.Paramtype.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "archivefolderpath"), (org.siri.feederconfig.xmlbinding.Archivefolderpath.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "emailbatchsize"), (org.siri.feederconfig.xmlbinding.Emailbatchsize.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "infolderchunksize"), (org.siri.feederconfig.xmlbinding.Infolderchunksize.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "rollingschedule"), (org.siri.feederconfig.xmlbinding.Rollingschedule.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "iorpath"), (org.siri.feederconfig.xmlbinding.Iorpath.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: org.siri.feederconfig.xmlbinding
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param value
     *     the value of the property to be set
     * @param name
     *     the name of the property to retrieve
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of ReconnectToObjectPolicy
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.ReconnectToObjectPolicy createReconnectToObjectPolicy()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ReconnectToObjectPolicyImpl();
    }

    /**
     * Create an instance of ReconnectToObjectPolicy
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.ReconnectToObjectPolicy createReconnectToObjectPolicy(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ReconnectToObjectPolicyImpl(value);
    }

    /**
     * Create an instance of Iorpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Iorpath createIorpath()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.IorpathImpl();
    }

    /**
     * Create an instance of Iorpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Iorpath createIorpath(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.IorpathImpl(value);
    }

    /**
     * Create an instance of Maxbackupindex
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Maxbackupindex createMaxbackupindex()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.MaxbackupindexImpl();
    }

    /**
     * Create an instance of Maxbackupindex
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Maxbackupindex createMaxbackupindex(short value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.MaxbackupindexImpl(value);
    }

    /**
     * Create an instance of GlobalSettingsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.GlobalSettingsType createGlobalSettingsType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.GlobalSettingsTypeImpl();
    }

    /**
     * Create an instance of InfoldersendchunksType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.InfoldersendchunksType createInfoldersendchunksType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.InfoldersendchunksTypeImpl();
    }

    /**
     * Create an instance of PopType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.PopType createPopType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.PopTypeImpl();
    }

    /**
     * Create an instance of Loglevel
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Loglevel createLoglevel()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.LoglevelImpl();
    }

    /**
     * Create an instance of Loglevel
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Loglevel createLoglevel(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.LoglevelImpl(value);
    }

    /**
     * Create an instance of EmailsendintervallInMilliSeconds
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.EmailsendintervallInMilliSeconds createEmailsendintervallInMilliSeconds()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailsendintervallInMilliSecondsImpl();
    }

    /**
     * Create an instance of EmailsendintervallInMilliSeconds
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.EmailsendintervallInMilliSeconds createEmailsendintervallInMilliSeconds(long value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailsendintervallInMilliSecondsImpl(value);
    }

    /**
     * Create an instance of OutfolderType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.OutfolderType createOutfolderType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.OutfolderTypeImpl();
    }

    /**
     * Create an instance of TransformType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.TransformType createTransformType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.TransformTypeImpl();
    }

    /**
     * Create an instance of Smsservice
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Smsservice createSmsservice()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SmsserviceImpl();
    }

    /**
     * Create an instance of Smsservice
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Smsservice createSmsservice(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SmsserviceImpl(value);
    }

    /**
     * Create an instance of EmailserversettingsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.EmailserversettingsType createEmailserversettingsType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailserversettingsTypeImpl();
    }

    /**
     * Create an instance of Servicerootpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Servicerootpath createServicerootpath()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ServicerootpathImpl();
    }

    /**
     * Create an instance of Servicerootpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Servicerootpath createServicerootpath(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ServicerootpathImpl(value);
    }

    /**
     * Create an instance of EmailnotificationType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.EmailnotificationType createEmailnotificationType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailnotificationTypeImpl();
    }

    /**
     * Create an instance of Sortonresend
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Sortonresend createSortonresend()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SortonresendImpl();
    }

    /**
     * Create an instance of Sortonresend
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Sortonresend createSortonresend(boolean value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SortonresendImpl(value);
    }

    /**
     * Create an instance of Smsonfailure
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Smsonfailure createSmsonfailure()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SmsonfailureImpl();
    }

    /**
     * Create an instance of Smsonfailure
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Smsonfailure createSmsonfailure(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SmsonfailureImpl(value);
    }

    /**
     * Create an instance of SmsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.SmsType createSmsType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SmsTypeImpl();
    }

    /**
     * Create an instance of IntervallInMilliSeconds
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.IntervallInMilliSeconds createIntervallInMilliSeconds()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.IntervallInMilliSecondsImpl();
    }

    /**
     * Create an instance of IntervallInMilliSeconds
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.IntervallInMilliSeconds createIntervallInMilliSeconds(long value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.IntervallInMilliSecondsImpl(value);
    }

    /**
     * Create an instance of Objectmethod
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Objectmethod createObjectmethod()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ObjectmethodImpl();
    }

    /**
     * Create an instance of Objectmethod
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Objectmethod createObjectmethod(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ObjectmethodImpl(value);
    }

    /**
     * Create an instance of Emailonfailure
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Emailonfailure createEmailonfailure()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailonfailureImpl();
    }

    /**
     * Create an instance of Emailonfailure
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Emailonfailure createEmailonfailure(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailonfailureImpl(value);
    }

    /**
     * Create an instance of Maxfilesize
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Maxfilesize createMaxfilesize()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.MaxfilesizeImpl();
    }

    /**
     * Create an instance of Maxfilesize
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Maxfilesize createMaxfilesize(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.MaxfilesizeImpl(value);
    }

    /**
     * Create an instance of NameserviceType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.NameserviceType createNameserviceType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.NameserviceTypeImpl();
    }

    /**
     * Create an instance of ImapType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.ImapType createImapType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ImapTypeImpl();
    }

    /**
     * Create an instance of Archivefolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Archivefolderpath createArchivefolderpath()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ArchivefolderpathImpl();
    }

    /**
     * Create an instance of Archivefolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Archivefolderpath createArchivefolderpath(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ArchivefolderpathImpl(value);
    }

    /**
     * Create an instance of Outfolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Outfolderpath createOutfolderpath()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.OutfolderpathImpl();
    }

    /**
     * Create an instance of Outfolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Outfolderpath createOutfolderpath(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.OutfolderpathImpl(value);
    }

    /**
     * Create an instance of SmtpType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.SmtpType createSmtpType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SmtpTypeImpl();
    }

    /**
     * Create an instance of Logfolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Logfolderpath createLogfolderpath()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.LogfolderpathImpl();
    }

    /**
     * Create an instance of Logfolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Logfolderpath createLogfolderpath(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.LogfolderpathImpl(value);
    }

    /**
     * Create an instance of SystemConfig
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.SystemConfig createSystemConfig()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SystemConfigImpl();
    }

    /**
     * Create an instance of Infolderchunkthreshold
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Infolderchunkthreshold createInfolderchunkthreshold()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.InfolderchunkthresholdImpl();
    }

    /**
     * Create an instance of Infolderchunkthreshold
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Infolderchunkthreshold createInfolderchunkthreshold(short value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.InfolderchunkthresholdImpl(value);
    }

    /**
     * Create an instance of SystemConfigType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.SystemConfigType createSystemConfigType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SystemConfigTypeImpl();
    }

    /**
     * Create an instance of ImapserverType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.ImapserverType createImapserverType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ImapserverTypeImpl();
    }

    /**
     * Create an instance of Message
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Message createMessage()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.MessageImpl();
    }

    /**
     * Create an instance of Message
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Message createMessage(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.MessageImpl(value);
    }

    /**
     * Create an instance of ServiceType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.ServiceType createServiceType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ServiceTypeImpl();
    }

    /**
     * Create an instance of Objectname
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Objectname createObjectname()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ObjectnameImpl();
    }

    /**
     * Create an instance of Objectname
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Objectname createObjectname(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ObjectnameImpl(value);
    }

    /**
     * Create an instance of ArchivehandlerType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.ArchivehandlerType createArchivehandlerType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ArchivehandlerTypeImpl();
    }

    /**
     * Create an instance of ReconnectToObjectInMilliSeconds
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.ReconnectToObjectInMilliSeconds createReconnectToObjectInMilliSeconds()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ReconnectToObjectInMilliSecondsImpl();
    }

    /**
     * Create an instance of ReconnectToObjectInMilliSeconds
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.ReconnectToObjectInMilliSeconds createReconnectToObjectInMilliSeconds(long value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ReconnectToObjectInMilliSecondsImpl(value);
    }

    /**
     * Create an instance of ErrorType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.ErrorType createErrorType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ErrorTypeImpl();
    }

    /**
     * Create an instance of EmailsettingsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.EmailsettingsType createEmailsettingsType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailsettingsTypeImpl();
    }

    /**
     * Create an instance of InfolderType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.InfolderType createInfolderType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.InfolderTypeImpl();
    }

    /**
     * Create an instance of Errorinfofolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Errorinfofolderpath createErrorinfofolderpath()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ErrorinfofolderpathImpl();
    }

    /**
     * Create an instance of Errorinfofolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Errorinfofolderpath createErrorinfofolderpath(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ErrorinfofolderpathImpl(value);
    }

    /**
     * Create an instance of Backupfolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Backupfolderpath createBackupfolderpath()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.BackupfolderpathImpl();
    }

    /**
     * Create an instance of Backupfolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Backupfolderpath createBackupfolderpath(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.BackupfolderpathImpl(value);
    }

    /**
     * Create an instance of Infolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Infolderpath createInfolderpath()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.InfolderpathImpl();
    }

    /**
     * Create an instance of Infolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Infolderpath createInfolderpath(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.InfolderpathImpl(value);
    }

    /**
     * Create an instance of PopserverType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.PopserverType createPopserverType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.PopserverTypeImpl();
    }

    /**
     * Create an instance of MaxInactivityPeriodInMilliSeconds
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.MaxInactivityPeriodInMilliSeconds createMaxInactivityPeriodInMilliSeconds()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.MaxInactivityPeriodInMilliSecondsImpl();
    }

    /**
     * Create an instance of MaxInactivityPeriodInMilliSeconds
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.MaxInactivityPeriodInMilliSeconds createMaxInactivityPeriodInMilliSeconds(long value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.MaxInactivityPeriodInMilliSecondsImpl(value);
    }

    /**
     * Create an instance of Skipfirstblankline
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Skipfirstblankline createSkipfirstblankline()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SkipfirstblanklineImpl();
    }

    /**
     * Create an instance of Skipfirstblankline
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Skipfirstblankline createSkipfirstblankline(boolean value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SkipfirstblanklineImpl(value);
    }

    /**
     * Create an instance of Errorfolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Errorfolderpath createErrorfolderpath()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ErrorfolderpathImpl();
    }

    /**
     * Create an instance of Errorfolderpath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Errorfolderpath createErrorfolderpath(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ErrorfolderpathImpl(value);
    }

    /**
     * Create an instance of Sortalpha
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Sortalpha createSortalpha()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SortalphaImpl();
    }

    /**
     * Create an instance of Sortalpha
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Sortalpha createSortalpha(boolean value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SortalphaImpl(value);
    }

    /**
     * Create an instance of NotifyeveryintervallInMilliSeconds
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.NotifyeveryintervallInMilliSeconds createNotifyeveryintervallInMilliSeconds()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.NotifyeveryintervallInMilliSecondsImpl();
    }

    /**
     * Create an instance of NotifyeveryintervallInMilliSeconds
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.NotifyeveryintervallInMilliSeconds createNotifyeveryintervallInMilliSeconds(long value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.NotifyeveryintervallInMilliSecondsImpl(value);
    }

    /**
     * Create an instance of LoggingType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.LoggingType createLoggingType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.LoggingTypeImpl();
    }

    /**
     * Create an instance of InactivityType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.InactivityType createInactivityType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.InactivityTypeImpl();
    }

    /**
     * Create an instance of AppenderType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.AppenderType createAppenderType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.AppenderTypeImpl();
    }

    /**
     * Create an instance of Rollingschedule
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Rollingschedule createRollingschedule()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.RollingscheduleImpl();
    }

    /**
     * Create an instance of Rollingschedule
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Rollingschedule createRollingschedule(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.RollingscheduleImpl(value);
    }

    /**
     * Create an instance of Infolderchunksize
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Infolderchunksize createInfolderchunksize()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.InfolderchunksizeImpl();
    }

    /**
     * Create an instance of Infolderchunksize
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Infolderchunksize createInfolderchunksize(short value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.InfolderchunksizeImpl(value);
    }

    /**
     * Create an instance of ErrornotificationType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.ErrornotificationType createErrornotificationType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ErrornotificationTypeImpl();
    }

    /**
     * Create an instance of SmtpserverType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.SmtpserverType createSmtpserverType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.SmtpserverTypeImpl();
    }

    /**
     * Create an instance of BackupType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.BackupType createBackupType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.BackupTypeImpl();
    }

    /**
     * Create an instance of TransformfileType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.TransformfileType createTransformfileType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.TransformfileTypeImpl();
    }

    /**
     * Create an instance of Paramtype
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Paramtype createParamtype()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ParamtypeImpl();
    }

    /**
     * Create an instance of Paramtype
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Paramtype createParamtype(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.ParamtypeImpl(value);
    }

    /**
     * Create an instance of Logpattern
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Logpattern createLogpattern()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.LogpatternImpl();
    }

    /**
     * Create an instance of Logpattern
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Logpattern createLogpattern(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.LogpatternImpl(value);
    }

    /**
     * Create an instance of Emailservice
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Emailservice createEmailservice()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailserviceImpl();
    }

    /**
     * Create an instance of Emailservice
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Emailservice createEmailservice(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailserviceImpl(value);
    }

    /**
     * Create an instance of Emailbatchsize
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Emailbatchsize createEmailbatchsize()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailbatchsizeImpl();
    }

    /**
     * Create an instance of Emailbatchsize
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Emailbatchsize createEmailbatchsize(short value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailbatchsizeImpl(value);
    }

    /**
     * Create an instance of Numberoferrors
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Numberoferrors createNumberoferrors()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.NumberoferrorsImpl();
    }

    /**
     * Create an instance of Numberoferrors
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.Numberoferrors createNumberoferrors(short value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.NumberoferrorsImpl(value);
    }

    /**
     * Create an instance of CronJob
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.CronJob createCronJob()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.CronJobImpl();
    }

    /**
     * Create an instance of CronJob
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.CronJob createCronJob(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.CronJobImpl(value);
    }

    /**
     * Create an instance of EmailOnInactivity
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.EmailOnInactivity createEmailOnInactivity()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailOnInactivityImpl();
    }

    /**
     * Create an instance of EmailOnInactivity
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.EmailOnInactivity createEmailOnInactivity(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.EmailOnInactivityImpl(value);
    }

    /**
     * Create an instance of PollType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public org.siri.feederconfig.xmlbinding.PollType createPollType()
        throws javax.xml.bind.JAXBException
    {
        return new org.siri.feederconfig.xmlbinding.impl.PollTypeImpl();
    }

}
