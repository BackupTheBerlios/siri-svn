//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.10.03 at 10:59:53 CEST 
//


package org.siri.feederconfig.xmlbinding.impl;

public class ServiceTypeImpl implements org.siri.feederconfig.xmlbinding.ServiceType, com.sun.xml.bind.JAXBObject, org.siri.feederconfig.xmlbinding.impl.runtime.UnmarshallableObject, org.siri.feederconfig.xmlbinding.impl.runtime.XMLSerializable, org.siri.feederconfig.xmlbinding.impl.runtime.ValidatableObject
{

    protected boolean has_Createuniquename;
    protected boolean _Createuniquename;
    protected java.lang.String _Type;
    protected org.siri.feederconfig.xmlbinding.EmailsettingsType _Emailsettings;
    protected org.siri.feederconfig.xmlbinding.BackupType _Backup;
    protected boolean has_Usesrelativerootpath;
    protected boolean _Usesrelativerootpath;
    protected org.siri.feederconfig.xmlbinding.TransformType _Transform;
    protected org.siri.feederconfig.xmlbinding.PollType _Poll;
    protected org.siri.feederconfig.xmlbinding.ErrorType _Error;
    protected org.siri.feederconfig.xmlbinding.LoggingType _Messagelogger;
    protected org.siri.feederconfig.xmlbinding.OutfolderType _Outfolder;
    protected org.siri.feederconfig.xmlbinding.InactivityType _Inactivity;
    protected org.siri.feederconfig.xmlbinding.LoggingType _Applicationlogger;
    protected org.siri.feederconfig.xmlbinding.NameserviceType _Nameservice;
    protected java.lang.String _Id;
    protected org.siri.feederconfig.xmlbinding.InfolderType _Infolder;
    public final static java.lang.Class version = (org.siri.feederconfig.xmlbinding.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (org.siri.feederconfig.xmlbinding.ServiceType.class);
    }

    public boolean isCreateuniquename() {
        return _Createuniquename;
    }

    public void setCreateuniquename(boolean value) {
        _Createuniquename = value;
        has_Createuniquename = true;
    }

    public java.lang.String getType() {
        return _Type;
    }

    public void setType(java.lang.String value) {
        _Type = value;
    }

    public org.siri.feederconfig.xmlbinding.EmailsettingsType getEmailsettings() {
        return _Emailsettings;
    }

    public void setEmailsettings(org.siri.feederconfig.xmlbinding.EmailsettingsType value) {
        _Emailsettings = value;
    }

    public org.siri.feederconfig.xmlbinding.BackupType getBackup() {
        return _Backup;
    }

    public void setBackup(org.siri.feederconfig.xmlbinding.BackupType value) {
        _Backup = value;
    }

    public boolean isUsesrelativerootpath() {
        return _Usesrelativerootpath;
    }

    public void setUsesrelativerootpath(boolean value) {
        _Usesrelativerootpath = value;
        has_Usesrelativerootpath = true;
    }

    public org.siri.feederconfig.xmlbinding.TransformType getTransform() {
        return _Transform;
    }

    public void setTransform(org.siri.feederconfig.xmlbinding.TransformType value) {
        _Transform = value;
    }

    public org.siri.feederconfig.xmlbinding.PollType getPoll() {
        return _Poll;
    }

    public void setPoll(org.siri.feederconfig.xmlbinding.PollType value) {
        _Poll = value;
    }

    public org.siri.feederconfig.xmlbinding.ErrorType getError() {
        return _Error;
    }

    public void setError(org.siri.feederconfig.xmlbinding.ErrorType value) {
        _Error = value;
    }

    public org.siri.feederconfig.xmlbinding.LoggingType getMessagelogger() {
        return _Messagelogger;
    }

    public void setMessagelogger(org.siri.feederconfig.xmlbinding.LoggingType value) {
        _Messagelogger = value;
    }

    public org.siri.feederconfig.xmlbinding.OutfolderType getOutfolder() {
        return _Outfolder;
    }

    public void setOutfolder(org.siri.feederconfig.xmlbinding.OutfolderType value) {
        _Outfolder = value;
    }

    public org.siri.feederconfig.xmlbinding.InactivityType getInactivity() {
        return _Inactivity;
    }

    public void setInactivity(org.siri.feederconfig.xmlbinding.InactivityType value) {
        _Inactivity = value;
    }

    public org.siri.feederconfig.xmlbinding.LoggingType getApplicationlogger() {
        return _Applicationlogger;
    }

    public void setApplicationlogger(org.siri.feederconfig.xmlbinding.LoggingType value) {
        _Applicationlogger = value;
    }

    public org.siri.feederconfig.xmlbinding.NameserviceType getNameservice() {
        return _Nameservice;
    }

    public void setNameservice(org.siri.feederconfig.xmlbinding.NameserviceType value) {
        _Nameservice = value;
    }

    public java.lang.String getId() {
        return _Id;
    }

    public void setId(java.lang.String value) {
        _Id = value;
    }

    public org.siri.feederconfig.xmlbinding.InfolderType getInfolder() {
        return _Infolder;
    }

    public void setInfolder(org.siri.feederconfig.xmlbinding.InfolderType value) {
        _Infolder = value;
    }

    public org.siri.feederconfig.xmlbinding.impl.runtime.UnmarshallingEventHandler createUnmarshaller(org.siri.feederconfig.xmlbinding.impl.runtime.UnmarshallingContext context) {
        return new org.siri.feederconfig.xmlbinding.impl.ServiceTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(org.siri.feederconfig.xmlbinding.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (!has_Usesrelativerootpath) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Usesrelativerootpath"));
        }
        if (_Poll!= null) {
            context.startElement("", "poll");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Poll), "Poll");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Poll), "Poll");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Poll), "Poll");
            context.endElement();
        }
        if (_Infolder!= null) {
            context.startElement("", "infolder");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Infolder), "Infolder");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Infolder), "Infolder");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Infolder), "Infolder");
            context.endElement();
        }
        if (_Emailsettings!= null) {
            context.startElement("", "emailsettings");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Emailsettings), "Emailsettings");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Emailsettings), "Emailsettings");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Emailsettings), "Emailsettings");
            context.endElement();
        }
        if (_Outfolder!= null) {
            context.startElement("", "outfolder");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Outfolder), "Outfolder");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Outfolder), "Outfolder");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Outfolder), "Outfolder");
            context.endElement();
        }
        if (_Backup!= null) {
            context.startElement("", "backup");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Backup), "Backup");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Backup), "Backup");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Backup), "Backup");
            context.endElement();
        }
        if (_Transform!= null) {
            context.startElement("", "transform");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Transform), "Transform");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Transform), "Transform");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Transform), "Transform");
            context.endElement();
        }
        context.startElement("", "error");
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Error), "Error");
        context.endNamespaceDecls();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Error), "Error");
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _Error), "Error");
        context.endElement();
        context.startElement("", "inactivity");
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Inactivity), "Inactivity");
        context.endNamespaceDecls();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Inactivity), "Inactivity");
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _Inactivity), "Inactivity");
        context.endElement();
        if (_Nameservice!= null) {
            context.startElement("", "nameservice");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Nameservice), "Nameservice");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Nameservice), "Nameservice");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Nameservice), "Nameservice");
            context.endElement();
        }
        context.startElement("", "applicationlogger");
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Applicationlogger), "Applicationlogger");
        context.endNamespaceDecls();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Applicationlogger), "Applicationlogger");
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _Applicationlogger), "Applicationlogger");
        context.endElement();
        context.startElement("", "messagelogger");
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Messagelogger), "Messagelogger");
        context.endNamespaceDecls();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Messagelogger), "Messagelogger");
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _Messagelogger), "Messagelogger");
        context.endElement();
    }

    public void serializeAttributes(org.siri.feederconfig.xmlbinding.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (!has_Usesrelativerootpath) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Usesrelativerootpath"));
        }
        if (has_Createuniquename) {
            context.startAttribute("", "createuniquename");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Createuniquename)), "Createuniquename");
            } catch (java.lang.Exception e) {
                org.siri.feederconfig.xmlbinding.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "id");
        try {
            context.text(((java.lang.String) _Id), "Id");
        } catch (java.lang.Exception e) {
            org.siri.feederconfig.xmlbinding.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "type");
        try {
            context.text(((java.lang.String) _Type), "Type");
        } catch (java.lang.Exception e) {
            org.siri.feederconfig.xmlbinding.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "usesrelativerootpath");
        try {
            context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _Usesrelativerootpath)), "Usesrelativerootpath");
        } catch (java.lang.Exception e) {
            org.siri.feederconfig.xmlbinding.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
    }

    public void serializeURIs(org.siri.feederconfig.xmlbinding.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (!has_Usesrelativerootpath) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "Usesrelativerootpath"));
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (org.siri.feederconfig.xmlbinding.ServiceType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~"
+"\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000\'"
+"com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameCla"
+"sst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar."
+"ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontent"
+"Modelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p"
+"\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0013ppsr\u0000 com.sun.msv.grammar.OneOrMoreE"
+"xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003e"
+"xpq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u001apsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0016xq\u0000~\u0000\u0003q\u0000~\u0000\u001apsr\u00002com.sun.ms"
+"v.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000"
+"~\u0000\u0019\u0001psr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom."
+"sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.gramma"
+"r.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000%psr\u0000#com"
+".sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Lj"
+"ava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000,xq\u0000~\u0000\'t\u0000)org.siri.feeder"
+"config.xmlbinding.PollTypet\u0000+http://java.sun.com/jaxb/xjc/du"
+"mmy-elementssq\u0000~\u0000\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001apsr\u0000\u001bcom.sun.msv.grammar.Data"
+"Exp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exce"
+"ptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"co"
+"m.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.d"
+"atatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.data"
+"type.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd"
+".XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000,L\u0000\btypeNameq\u0000~"
+"\u0000,L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProces"
+"sor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun"
+".msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
+",com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr"
+"\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalN"
+"ameq\u0000~\u0000,L\u0000\fnamespaceURIq\u0000~\u0000,xpq\u0000~\u0000=q\u0000~\u0000<sq\u0000~\u0000+t\u0000\u0004typet\u0000)http"
+"://www.w3.org/2001/XMLSchema-instanceq\u0000~\u0000*sq\u0000~\u0000+t\u0000\u0004pollt\u0000\u0000q\u0000"
+"~\u0000*sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u0015q\u0000~\u0000\u001ap\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u001eq\u0000~\u0000\u001a"
+"psq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000$q\u0000~\u0000(q\u0000~\u0000*sq\u0000~\u0000+t\u0000-org.siri.feederconfig.x"
+"mlbinding.InfolderTypeq\u0000~\u0000/sq\u0000~\u0000\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u00005q\u0000~\u0000Eq\u0000~"
+"\u0000*sq\u0000~\u0000+t\u0000\binfolderq\u0000~\u0000Jq\u0000~\u0000*sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u0015q\u0000~\u0000\u001ap\u0000sq\u0000~\u0000\u0000ppsq"
+"\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u001eq\u0000~\u0000\u001apsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000$q\u0000~\u0000(q\u0000~\u0000*sq\u0000~\u0000+"
+"t\u00002org.siri.feederconfig.xmlbinding.EmailsettingsTypeq\u0000~\u0000/sq"
+"\u0000~\u0000\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000*sq\u0000~\u0000+t\u0000\remailsettingsq\u0000~\u0000J"
+"q\u0000~\u0000*sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u0015q\u0000~\u0000\u001ap\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u001eq\u0000~"
+"\u0000\u001apsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000$q\u0000~\u0000(q\u0000~\u0000*sq\u0000~\u0000+t\u0000.org.siri.feederconfig"
+".xmlbinding.OutfolderTypeq\u0000~\u0000/sq\u0000~\u0000\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u00005q\u0000~\u0000E"
+"q\u0000~\u0000*sq\u0000~\u0000+t\u0000\toutfolderq\u0000~\u0000Jq\u0000~\u0000*sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u0015q\u0000~\u0000\u001ap\u0000sq\u0000~\u0000\u0000"
+"ppsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u001eq\u0000~\u0000\u001apsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000$q\u0000~\u0000(q\u0000~\u0000*sq"
+"\u0000~\u0000+t\u0000+org.siri.feederconfig.xmlbinding.BackupTypeq\u0000~\u0000/sq\u0000~\u0000"
+"\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000*sq\u0000~\u0000+t\u0000\u0006backupq\u0000~\u0000Jq\u0000~\u0000*sq\u0000~\u0000"
+"\u0013ppsq\u0000~\u0000\u0015q\u0000~\u0000\u001ap\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u001eq\u0000~\u0000\u001apsq\u0000~\u0000!q"
+"\u0000~\u0000\u001apq\u0000~\u0000$q\u0000~\u0000(q\u0000~\u0000*sq\u0000~\u0000+t\u0000.org.siri.feederconfig.xmlbindin"
+"g.TransformTypeq\u0000~\u0000/sq\u0000~\u0000\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000*sq\u0000~\u0000"
+"+t\u0000\ttransformq\u0000~\u0000Jq\u0000~\u0000*sq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0013ppsq\u0000"
+"~\u0000\u001eq\u0000~\u0000\u001apsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000$q\u0000~\u0000(q\u0000~\u0000*sq\u0000~\u0000+t\u0000*org.siri.feeder"
+"config.xmlbinding.ErrorTypeq\u0000~\u0000/sq\u0000~\u0000\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u00005q\u0000~"
+"\u0000Eq\u0000~\u0000*sq\u0000~\u0000+t\u0000\u0005errorq\u0000~\u0000Jsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0013pp"
+"sq\u0000~\u0000\u001eq\u0000~\u0000\u001apsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000$q\u0000~\u0000(q\u0000~\u0000*sq\u0000~\u0000+t\u0000/org.siri.fee"
+"derconfig.xmlbinding.InactivityTypeq\u0000~\u0000/sq\u0000~\u0000\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001ap"
+"q\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000*sq\u0000~\u0000+t\u0000\ninactivityq\u0000~\u0000Jsq\u0000~\u0000\u0013ppsq\u0000~\u0000\u0015q\u0000~\u0000\u001ap\u0000"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u001eq\u0000~\u0000\u001apsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000$q\u0000~\u0000(q"
+"\u0000~\u0000*sq\u0000~\u0000+t\u00000org.siri.feederconfig.xmlbinding.NameserviceTyp"
+"eq\u0000~\u0000/sq\u0000~\u0000\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000*sq\u0000~\u0000+t\u0000\u000bnameservic"
+"eq\u0000~\u0000Jq\u0000~\u0000*sq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0013ppsq\u0000~\u0000\u001eq\u0000~\u0000\u001apsq\u0000"
+"~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000$q\u0000~\u0000(q\u0000~\u0000*sq\u0000~\u0000+t\u0000,org.siri.feederconfig.xmlbi"
+"nding.LoggingTypeq\u0000~\u0000/sq\u0000~\u0000\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000*sq\u0000"
+"~\u0000+t\u0000\u0011applicationloggerq\u0000~\u0000Jsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0013"
+"ppsq\u0000~\u0000\u001eq\u0000~\u0000\u001apsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u0000$q\u0000~\u0000(q\u0000~\u0000*sq\u0000~\u0000+q\u0000~\u0000\u00b8q\u0000~\u0000/sq\u0000"
+"~\u0000\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001apq\u0000~\u00005q\u0000~\u0000Eq\u0000~\u0000*sq\u0000~\u0000+t\u0000\rmessageloggerq\u0000~\u0000Js"
+"q\u0000~\u0000\u0013ppsq\u0000~\u0000!q\u0000~\u0000\u001apsq\u0000~\u00002ppsr\u0000$com.sun.msv.datatype.xsd.Bool"
+"eanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00007q\u0000~\u0000<t\u0000\u0007booleanq\u0000~\u0000@q\u0000~\u0000Bsq\u0000~\u0000Cq\u0000~\u0000\u00cd"
+"q\u0000~\u0000<sq\u0000~\u0000+t\u0000\u0010createuniquenameq\u0000~\u0000Jq\u0000~\u0000*sq\u0000~\u0000!ppsq\u0000~\u00002ppsr\u0000%"
+"com.sun.msv.datatype.xsd.SimpleURType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00007q\u0000~\u0000<t"
+"\u0000\ranySimpleTypesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProces"
+"sor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000?q\u0000~\u0000Bsq\u0000~\u0000Cq\u0000~\u0000\u00d5q\u0000~\u0000<sq\u0000~\u0000+t\u0000\u0002i"
+"dq\u0000~\u0000Jsq\u0000~\u0000!ppsq\u0000~\u00002ppsr\u0000#com.sun.msv.datatype.xsd.StringTyp"
+"e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u00007q\u0000~\u0000<t\u0000\u0006stringq\u0000~\u0000\u00d7\u0001q\u0000~\u0000Bs"
+"q\u0000~\u0000Cq\u0000~\u0000\u00dfq\u0000~\u0000<sq\u0000~\u0000+t\u0000\u0004typeq\u0000~\u0000Jsq\u0000~\u0000!ppq\u0000~\u0000\u00casq\u0000~\u0000+t\u0000\u0014usesr"
+"elativerootpathq\u0000~\u0000Jsr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$C"
+"losedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHas"
+"h\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv"
+"/grammar/ExpressionPool;xp\u0000\u0000\u0000B\u0001pq\u0000~\u0000\u007fq\u0000~\u0000rq\u0000~\u0000eq\u0000~\u0000Xq\u0000~\u0000Kq\u0000~"
+"\u0000\u0014q\u0000~\u0000\rq\u0000~\u0000\fq\u0000~\u0000\u00c8q\u0000~\u0000\u0010q\u0000~\u0000\u00b2q\u0000~\u0000\u00a6q\u0000~\u0000\u0099q\u0000~\u0000\u008dq\u0000~\u0000\u0081q\u0000~\u0000tq\u0000~\u0000gq\u0000~"
+"\u0000Zq\u0000~\u0000Mq\u0000~\u0000\u001bq\u0000~\u0000\u00beq\u0000~\u0000\u0005q\u0000~\u0000\nq\u0000~\u0000\u0006q\u0000~\u0000\u00c1q\u0000~\u0000\u00b5q\u0000~\u0000\u00a9q\u0000~\u0000\u009cq\u0000~\u0000\u0090q\u0000~"
+"\u0000\u0084q\u0000~\u0000wq\u0000~\u0000jq\u0000~\u0000]q\u0000~\u0000Pq\u0000~\u0000 q\u0000~\u0000\u00b9q\u0000~\u0000\u00adq\u0000~\u0000\u00a0q\u0000~\u0000\u0094q\u0000~\u0000\u0088q\u0000~\u0000{q\u0000~"
+"\u0000nq\u0000~\u0000aq\u0000~\u0000Tq\u0000~\u00000q\u0000~\u0000\u00c4q\u0000~\u0000\u000fq\u0000~\u0000\tq\u0000~\u0000\u0012q\u0000~\u0000\u0011q\u0000~\u0000\bq\u0000~\u0000\u00b4q\u0000~\u0000\u00a8q\u0000~"
+"\u0000\u009bq\u0000~\u0000\u008fq\u0000~\u0000\u0083q\u0000~\u0000vq\u0000~\u0000iq\u0000~\u0000\\q\u0000~\u0000Oq\u0000~\u0000\u001dq\u0000~\u0000\u000eq\u0000~\u0000\u00c0q\u0000~\u0000\u0007q\u0000~\u0000\u000bq\u0000~"
+"\u0000\u00a4x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends org.siri.feederconfig.xmlbinding.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(org.siri.feederconfig.xmlbinding.impl.runtime.UnmarshallingContext context) {
            super(context, "----------------------------------------------");
        }

        protected Unmarshaller(org.siri.feederconfig.xmlbinding.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return org.siri.feederconfig.xmlbinding.impl.ServiceTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  34 :
                        attIdx = context.getAttribute("", "inactivityOn");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  12 :
                        if (("poll" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  39 :
                        if (("applicationlogger" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 40;
                            return ;
                        }
                        break;
                    case  31 :
                        attIdx = context.getAttribute("", "errorhandleron");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  13 :
                        if (("message" == ___local)&&("" == ___uri)) {
                            _Poll = ((org.siri.feederconfig.xmlbinding.impl.PollTypeImpl) spawnChildFromEnterElement((org.siri.feederconfig.xmlbinding.impl.PollTypeImpl.class), 14, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  37 :
                        if (("iorpath" == ___local)&&("" == ___uri)) {
                            _Nameservice = ((org.siri.feederconfig.xmlbinding.impl.NameserviceTypeImpl) spawnChildFromEnterElement((org.siri.feederconfig.xmlbinding.impl.NameserviceTypeImpl.class), 38, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  18 :
                        if (("emailsettings" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  28 :
                        attIdx = context.getAttribute("", "transformon");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 9;
                            continue outer;
                        }
                        break;
                    case  16 :
                        if (("infolderpath" == ___local)&&("" == ___uri)) {
                            _Infolder = ((org.siri.feederconfig.xmlbinding.impl.InfolderTypeImpl) spawnChildFromEnterElement((org.siri.feederconfig.xmlbinding.impl.InfolderTypeImpl.class), 17, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  27 :
                        if (("transform" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 28;
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "createuniquename");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  25 :
                        attIdx = context.getAttribute("", "archiveron");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  40 :
                        if (("appender" == ___local)&&("" == ___uri)) {
                            _Applicationlogger = ((org.siri.feederconfig.xmlbinding.impl.LoggingTypeImpl) spawnChildFromEnterElement((org.siri.feederconfig.xmlbinding.impl.LoggingTypeImpl.class), 41, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  42 :
                        if (("messagelogger" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 43;
                            return ;
                        }
                        break;
                    case  24 :
                        if (("backup" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "usesrelativerootpath");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 12;
                            continue outer;
                        }
                        break;
                    case  45 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  33 :
                        if (("inactivity" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 34;
                            return ;
                        }
                        break;
                    case  36 :
                        if (("nameservice" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 37;
                            return ;
                        }
                        state = 39;
                        continue outer;
                    case  15 :
                        if (("infolder" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  22 :
                        if (("outfolderpath" == ___local)&&("" == ___uri)) {
                            _Outfolder = ((org.siri.feederconfig.xmlbinding.impl.OutfolderTypeImpl) spawnChildFromEnterElement((org.siri.feederconfig.xmlbinding.impl.OutfolderTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  30 :
                        if (("error" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 31;
                            return ;
                        }
                        break;
                    case  43 :
                        if (("appender" == ___local)&&("" == ___uri)) {
                            _Messagelogger = ((org.siri.feederconfig.xmlbinding.impl.LoggingTypeImpl) spawnChildFromEnterElement((org.siri.feederconfig.xmlbinding.impl.LoggingTypeImpl.class), 44, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  19 :
                        if (("emailbatchsize" == ___local)&&("" == ___uri)) {
                            _Emailsettings = ((org.siri.feederconfig.xmlbinding.impl.EmailsettingsTypeImpl) spawnChildFromEnterElement((org.siri.feederconfig.xmlbinding.impl.EmailsettingsTypeImpl.class), 20, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  21 :
                        if (("outfolder" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 6;
                            continue outer;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Type = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Createuniquename = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Createuniquename = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Usesrelativerootpath = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Usesrelativerootpath = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Id = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  14 :
                        if (("poll" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 15;
                            return ;
                        }
                        break;
                    case  34 :
                        attIdx = context.getAttribute("", "inactivityOn");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  31 :
                        attIdx = context.getAttribute("", "errorhandleron");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  38 :
                        if (("nameservice" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 39;
                            return ;
                        }
                        break;
                    case  20 :
                        if (("emailsettings" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 21;
                            return ;
                        }
                        break;
                    case  44 :
                        if (("messagelogger" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 45;
                            return ;
                        }
                        break;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  29 :
                        if (("transform" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 30;
                            return ;
                        }
                        break;
                    case  41 :
                        if (("applicationlogger" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 42;
                            return ;
                        }
                        break;
                    case  28 :
                        attIdx = context.getAttribute("", "transformon");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 9;
                            continue outer;
                        }
                        break;
                    case  23 :
                        if (("outfolder" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 24;
                            return ;
                        }
                        break;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "createuniquename");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  25 :
                        attIdx = context.getAttribute("", "archiveron");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "usesrelativerootpath");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 12;
                            continue outer;
                        }
                        break;
                    case  17 :
                        if (("infolder" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 18;
                            return ;
                        }
                        break;
                    case  35 :
                        if (("inactivity" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 36;
                            return ;
                        }
                        break;
                    case  45 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  36 :
                        state = 39;
                        continue outer;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  26 :
                        if (("backup" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 27;
                            return ;
                        }
                        break;
                    case  32 :
                        if (("error" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 33;
                            return ;
                        }
                        break;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 6;
                            continue outer;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  34 :
                        if (("inactivityOn" == ___local)&&("" == ___uri)) {
                            _Inactivity = ((org.siri.feederconfig.xmlbinding.impl.InactivityTypeImpl) spawnChildFromEnterAttribute((org.siri.feederconfig.xmlbinding.impl.InactivityTypeImpl.class), 35, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  31 :
                        if (("errorhandleron" == ___local)&&("" == ___uri)) {
                            _Error = ((org.siri.feederconfig.xmlbinding.impl.ErrorTypeImpl) spawnChildFromEnterAttribute((org.siri.feederconfig.xmlbinding.impl.ErrorTypeImpl.class), 32, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  28 :
                        if (("transformon" == ___local)&&("" == ___uri)) {
                            _Transform = ((org.siri.feederconfig.xmlbinding.impl.TransformTypeImpl) spawnChildFromEnterAttribute((org.siri.feederconfig.xmlbinding.impl.TransformTypeImpl.class), 29, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  6 :
                        if (("type" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        break;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  0 :
                        if (("createuniquename" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  25 :
                        if (("archiveron" == ___local)&&("" == ___uri)) {
                            _Backup = ((org.siri.feederconfig.xmlbinding.impl.BackupTypeImpl) spawnChildFromEnterAttribute((org.siri.feederconfig.xmlbinding.impl.BackupTypeImpl.class), 26, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  9 :
                        if (("usesrelativerootpath" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        break;
                    case  45 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  36 :
                        state = 39;
                        continue outer;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  3 :
                        if (("id" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        break;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  34 :
                        attIdx = context.getAttribute("", "inactivityOn");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  31 :
                        attIdx = context.getAttribute("", "errorhandleron");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  18 :
                        state = 21;
                        continue outer;
                    case  28 :
                        attIdx = context.getAttribute("", "transformon");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  8 :
                        if (("type" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 9;
                            continue outer;
                        }
                        break;
                    case  27 :
                        state = 30;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "createuniquename");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  25 :
                        attIdx = context.getAttribute("", "archiveron");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "usesrelativerootpath");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText3(v);
                            state = 12;
                            continue outer;
                        }
                        break;
                    case  45 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  36 :
                        state = 39;
                        continue outer;
                    case  5 :
                        if (("id" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("createuniquename" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  15 :
                        state = 18;
                        continue outer;
                    case  11 :
                        if (("usesrelativerootpath" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText4(v);
                            state = 6;
                            continue outer;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  34 :
                            attIdx = context.getAttribute("", "inactivityOn");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  12 :
                            state = 15;
                            continue outer;
                        case  31 :
                            attIdx = context.getAttribute("", "errorhandleron");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  1 :
                            eatText2(value);
                            state = 2;
                            return ;
                        case  18 :
                            state = 21;
                            continue outer;
                        case  28 :
                            attIdx = context.getAttribute("", "transformon");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  6 :
                            attIdx = context.getAttribute("", "type");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 9;
                                continue outer;
                            }
                            break;
                        case  4 :
                            eatText4(value);
                            state = 5;
                            return ;
                        case  27 :
                            state = 30;
                            continue outer;
                        case  0 :
                            attIdx = context.getAttribute("", "createuniquename");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = 3;
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  25 :
                            attIdx = context.getAttribute("", "archiveron");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  24 :
                            state = 27;
                            continue outer;
                        case  9 :
                            attIdx = context.getAttribute("", "usesrelativerootpath");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText3(v);
                                state = 12;
                                continue outer;
                            }
                            break;
                        case  7 :
                            eatText1(value);
                            state = 8;
                            return ;
                        case  45 :
                            revertToParentFromText(value);
                            return ;
                        case  36 :
                            state = 39;
                            continue outer;
                        case  15 :
                            state = 18;
                            continue outer;
                        case  21 :
                            state = 24;
                            continue outer;
                        case  10 :
                            eatText3(value);
                            state = 11;
                            return ;
                        case  3 :
                            attIdx = context.getAttribute("", "id");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText4(v);
                                state = 6;
                                continue outer;
                            }
                            break;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
