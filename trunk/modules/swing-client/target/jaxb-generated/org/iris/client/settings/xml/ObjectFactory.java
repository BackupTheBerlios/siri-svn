//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.3-b18-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2004.09.16 at 02:17:29 CEST
//


package org.iris.client.settings.xml;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the org.iris.client.settings.xml package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 *
 */
public class ObjectFactory
    extends org.iris.client.settings.xml.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(24, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static org.iris.client.settings.xml.impl.runtime.GrammarInfo grammarInfo = new org.iris.client.
        settings.xml.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations,
        (org.iris.client.settings.xml.ObjectFactory.class));
    public final static java.lang.Class version = (org.iris.client.settings.xml.impl.JAXBVersion.class);

    static
    {
        defaultImplementations.put( (org.iris.client.settings.xml.Lookandfeelthemepath.class),
            "org.iris.client.settings.xml.impl.LookandfeelthemepathImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Title.class),
            "org.iris.client.settings.xml.impl.TitleImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Releasedate.class),
            "org.iris.client.settings.xml.impl.ReleasedateImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Irisclient.class),
            "org.iris.client.settings.xml.impl.IrisclientImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Type.class),
            "org.iris.client.settings.xml.impl.TypeImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.IrisclientType.class),
            "org.iris.client.settings.xml.impl.IrisclientTypeImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.VersioninfoType.class),
            "org.iris.client.settings.xml.impl.VersioninfoTypeImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Pingservices.class),
            "org.iris.client.settings.xml.impl.PingservicesImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Rmiservice.class),
            "org.iris.client.settings.xml.impl.RmiserviceImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Description.class),
            "org.iris.client.settings.xml.impl.DescriptionImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Loggingport.class),
            "org.iris.client.settings.xml.impl.LoggingportImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Version.class),
            "org.iris.client.settings.xml.impl.VersionImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Developer.class),
            "org.iris.client.settings.xml.impl.DeveloperImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.IrisserverType.class),
            "org.iris.client.settings.xml.impl.IrisserverTypeImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Address.class),
            "org.iris.client.settings.xml.impl.AddressImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.LookandfeelType.class),
            "org.iris.client.settings.xml.impl.LookandfeelTypeImpl");
        defaultImplementations.put( (org.iris.client.settings.xml.Name.class),
            "org.iris.client.settings.xml.impl.NameImpl");
        rootTagMap.put(new javax.xml.namespace.QName("", "pingservices"), (org.iris.client.settings.xml.Pingservices.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "type"), (org.iris.client.settings.xml.Type.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "title"), (org.iris.client.settings.xml.Title.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "address"), (org.iris.client.settings.xml.Address.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "loggingport"), (org.iris.client.settings.xml.Loggingport.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "version"), (org.iris.client.settings.xml.Version.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "rmiservice"), (org.iris.client.settings.xml.Rmiservice.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "developer"), (org.iris.client.settings.xml.Developer.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "irisclient"), (org.iris.client.settings.xml.Irisclient.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "description"), (org.iris.client.settings.xml.Description.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "releasedate"), (org.iris.client.settings.xml.Releasedate.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "name"), (org.iris.client.settings.xml.Name.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "lookandfeelthemepath"),
            (org.iris.client.settings.xml.Lookandfeelthemepath.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: org.iris.client.settings.xml
     *
     */
    public ObjectFactory()
    {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     *
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     *
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name) throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     *
     * @param value
     *     the value of the property to be set
     * @param name
     *     the name of the property to retrieve
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value) throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of Lookandfeelthemepath
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Lookandfeelthemepath createLookandfeelthemepath() throws javax.xml.bind.
        JAXBException
    {
        return new org.iris.client.settings.xml.impl.LookandfeelthemepathImpl();
    }

    /**
     * Create an instance of Lookandfeelthemepath
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Lookandfeelthemepath createLookandfeelthemepath(java.lang.String value) throws
        javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.LookandfeelthemepathImpl(value);
    }

    /**
     * Create an instance of Title
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Title createTitle() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.TitleImpl();
    }

    /**
     * Create an instance of Title
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Title createTitle(java.lang.String value) throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.TitleImpl(value);
    }

    /**
     * Create an instance of Releasedate
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Releasedate createReleasedate() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.ReleasedateImpl();
    }

    /**
     * Create an instance of Releasedate
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Releasedate createReleasedate(java.util.Calendar value) throws javax.xml.bind.
        JAXBException
    {
        return new org.iris.client.settings.xml.impl.ReleasedateImpl(value);
    }

    /**
     * Create an instance of Irisclient
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Irisclient createIrisclient() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.IrisclientImpl();
    }

    /**
     * Create an instance of Type
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Type createType() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.TypeImpl();
    }

    /**
     * Create an instance of Type
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Type createType(java.lang.String value) throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.TypeImpl(value);
    }

    /**
     * Create an instance of IrisclientType
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.IrisclientType createIrisclientType() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.IrisclientTypeImpl();
    }

    /**
     * Create an instance of VersioninfoType
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.VersioninfoType createVersioninfoType() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.VersioninfoTypeImpl();
    }

    /**
     * Create an instance of Pingservices
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Pingservices createPingservices() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.PingservicesImpl();
    }

    /**
     * Create an instance of Pingservices
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Pingservices createPingservices(short value) throws javax.xml.bind.
        JAXBException
    {
        return new org.iris.client.settings.xml.impl.PingservicesImpl(value);
    }

    /**
     * Create an instance of Rmiservice
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Rmiservice createRmiservice() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.RmiserviceImpl();
    }

    /**
     * Create an instance of Rmiservice
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Rmiservice createRmiservice(java.lang.String value) throws javax.xml.bind.
        JAXBException
    {
        return new org.iris.client.settings.xml.impl.RmiserviceImpl(value);
    }

    /**
     * Create an instance of Description
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Description createDescription() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.DescriptionImpl();
    }

    /**
     * Create an instance of Description
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Description createDescription(java.lang.String value) throws javax.xml.bind.
        JAXBException
    {
        return new org.iris.client.settings.xml.impl.DescriptionImpl(value);
    }

    /**
     * Create an instance of Loggingport
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Loggingport createLoggingport() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.LoggingportImpl();
    }

    /**
     * Create an instance of Loggingport
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Loggingport createLoggingport(short value) throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.LoggingportImpl(value);
    }

    /**
     * Create an instance of Version
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Version createVersion() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.VersionImpl();
    }

    /**
     * Create an instance of Version
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Version createVersion(java.lang.String value) throws javax.xml.bind.
        JAXBException
    {
        return new org.iris.client.settings.xml.impl.VersionImpl(value);
    }

    /**
     * Create an instance of Developer
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Developer createDeveloper() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.DeveloperImpl();
    }

    /**
     * Create an instance of Developer
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Developer createDeveloper(java.lang.String value) throws javax.xml.bind.
        JAXBException
    {
        return new org.iris.client.settings.xml.impl.DeveloperImpl(value);
    }

    /**
     * Create an instance of IrisserverType
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.IrisserverType createIrisserverType() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.IrisserverTypeImpl();
    }

    /**
     * Create an instance of Address
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Address createAddress() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.AddressImpl();
    }

    /**
     * Create an instance of Address
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Address createAddress(java.lang.String value) throws javax.xml.bind.
        JAXBException
    {
        return new org.iris.client.settings.xml.impl.AddressImpl(value);
    }

    /**
     * Create an instance of LookandfeelType
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.LookandfeelType createLookandfeelType() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.LookandfeelTypeImpl();
    }

    /**
     * Create an instance of Name
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Name createName() throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.NameImpl();
    }

    /**
     * Create an instance of Name
     *
     * @throws JAXBException
     *     if an error occurs
     */
    public org.iris.client.settings.xml.Name createName(java.lang.String value) throws javax.xml.bind.JAXBException
    {
        return new org.iris.client.settings.xml.impl.NameImpl(value);
    }

}
